{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import {\n//   BarChart,\n//   Bar,\n//   XAxis,\n//   YAxis,\n//   Tooltip,\n//   ResponsiveContainer,\n//   CartesianGrid,\n// } from \"recharts\";\n// import API from \"../api\";\n\n// export default function DashboardHome() {\n//   const [stats, setStats] = useState({ users: 0, jobs: 0, companies: 0 });\n//   const [chartData, setChartData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   console.log(\"data\");\n//   console.log(\"starts\",stats);\n\n//   const fetchDashboardData = async () => {\n//     try {\n//       setLoading(true);\n//       const token = localStorage.getItem(\"token\");\n\n//       if (!token) {\n//         console.error(\"No token found\");\n//         setLoading(false);\n//         return;\n//       }\n\n//       const config = { headers: { Authorization: `Bearer ${token}` } };\n\n//       const [usersRes, jobsRes, companiesRes] = await Promise.all([\n//         API.get(\"/auth/users\", config),\n//         API.get(\"/jobs\", config),\n//         API.get(\"/companies\", config),\n//       ]);\n//       console.log(usersRes,\"usersss\");\n\n//       const users = Array.isArray(usersRes.data) ? usersRes.data.length : usersRes.data.count || 0;\n//       console.log(users,\"userssss\");\n\n//       const jobs = Array.isArray(jobsRes.data) ? jobsRes.data.length : jobsRes.data.count || 0;\n//       const companies = Array.isArray(companiesRes.data)\n//         ? companiesRes.data.length\n//         : companiesRes.data.count || 0;\n\n//       setStats({ users, jobs, companies });\n//       setChartData([\n//         { name: \"Users\", value: users },\n//         { name: \"Jobs\", value: jobs },\n//         { name: \"Companies\", value: companies },\n//       ]);\n//     } catch (err) {\n//       console.error(\"Failed to fetch dashboard data:\", err.response?.data || err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchDashboardData();\n//   }, []);\n\n//   if (loading) return <h3 style={{ textAlign: \"center\" }}>Loading Dashboard...</h3>;\n\n//   return (\n//     <div style={{ padding: \"20px\" }}>\n//       <h2 style={{ color: \"#6b3fa0\" }}>Dashboard Overview</h2>\n\n//       <div style={{ display: \"flex\", gap: \"20px\", marginBottom: \"40px\", flexWrap: \"wrap\" }}>\n//         <Card title=\"Total Users\" value={stats.users} color=\"#6b3fa0\" bg=\"#ede4ff\" />\n//         <Card title=\"Total Jobs\" value={stats.jobs} color=\"#007bff\" bg=\"#e8f6ff\" />\n//         <Card title=\"Total Companies\" value={stats.companies} color=\"#ff8c00\" bg=\"#fdf2e9\" />\n//       </div>\n\n//       <div style={{ background: \"#fff\", padding: \"20px\", borderRadius: \"10px\", boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\", height: \"350px\" }}>\n//         <h3 style={{ color: \"#6b3fa0\", marginBottom: \"10px\" }}>Graphical Representation</h3>\n//         <ResponsiveContainer width=\"50%\" height=\"100%\">\n//           <BarChart data={chartData}>\n//             <CartesianGrid strokeDasharray=\"3 3\" />\n//             <XAxis dataKey=\"name\" />\n//             <YAxis allowDecimals={false} />\n//             <Tooltip />\n//             <Bar dataKey=\"value\" fill=\"#6b3fa0\" radius={[5, 5, 0, 0]} />\n//           </BarChart>\n//         </ResponsiveContainer>\n//       </div>\n//     </div>\n//   );\n// }\n\n// const Card = ({ title, value, color, bg }) => (\n//   <div style={{ flex: \"1\", background: bg, borderRadius: \"10px\", padding: \"20px\", minWidth: \"220px\", boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\" }}>\n//     <h3 style={{ color }}>{title}</h3>\n//     <p style={{ fontSize: \"28px\", fontWeight: \"bold\" }}>{value}</p>\n//   </div>\n// );","map":{"version":3,"names":[],"sources":["C:/Users/aswathi/Downloads/job-tracker/job-tracker/client/src/components/DashboardHome.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   BarChart,\r\n//   Bar,\r\n//   XAxis,\r\n//   YAxis,\r\n//   Tooltip,\r\n//   ResponsiveContainer,\r\n//   CartesianGrid,\r\n// } from \"recharts\";\r\n// import API from \"../api\";\r\n\r\n// export default function DashboardHome() {\r\n//   const [stats, setStats] = useState({ users: 0, jobs: 0, companies: 0 });\r\n//   const [chartData, setChartData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   console.log(\"data\");\r\n//   console.log(\"starts\",stats);\r\n\r\n  \r\n\r\n//   const fetchDashboardData = async () => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const token = localStorage.getItem(\"token\");\r\n\r\n//       if (!token) {\r\n//         console.error(\"No token found\");\r\n//         setLoading(false);\r\n//         return;\r\n//       }\r\n\r\n//       const config = { headers: { Authorization: `Bearer ${token}` } };\r\n\r\n//       const [usersRes, jobsRes, companiesRes] = await Promise.all([\r\n//         API.get(\"/auth/users\", config),\r\n//         API.get(\"/jobs\", config),\r\n//         API.get(\"/companies\", config),\r\n//       ]);\r\n//       console.log(usersRes,\"usersss\");\r\n      \r\n\r\n//       const users = Array.isArray(usersRes.data) ? usersRes.data.length : usersRes.data.count || 0;\r\n//       console.log(users,\"userssss\");\r\n      \r\n//       const jobs = Array.isArray(jobsRes.data) ? jobsRes.data.length : jobsRes.data.count || 0;\r\n//       const companies = Array.isArray(companiesRes.data)\r\n//         ? companiesRes.data.length\r\n//         : companiesRes.data.count || 0;\r\n\r\n//       setStats({ users, jobs, companies });\r\n//       setChartData([\r\n//         { name: \"Users\", value: users },\r\n//         { name: \"Jobs\", value: jobs },\r\n//         { name: \"Companies\", value: companies },\r\n//       ]);\r\n//     } catch (err) {\r\n//       console.error(\"Failed to fetch dashboard data:\", err.response?.data || err.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchDashboardData();\r\n//   }, []);\r\n\r\n//   if (loading) return <h3 style={{ textAlign: \"center\" }}>Loading Dashboard...</h3>;\r\n\r\n//   return (\r\n//     <div style={{ padding: \"20px\" }}>\r\n//       <h2 style={{ color: \"#6b3fa0\" }}>Dashboard Overview</h2>\r\n\r\n//       <div style={{ display: \"flex\", gap: \"20px\", marginBottom: \"40px\", flexWrap: \"wrap\" }}>\r\n//         <Card title=\"Total Users\" value={stats.users} color=\"#6b3fa0\" bg=\"#ede4ff\" />\r\n//         <Card title=\"Total Jobs\" value={stats.jobs} color=\"#007bff\" bg=\"#e8f6ff\" />\r\n//         <Card title=\"Total Companies\" value={stats.companies} color=\"#ff8c00\" bg=\"#fdf2e9\" />\r\n//       </div>\r\n\r\n//       <div style={{ background: \"#fff\", padding: \"20px\", borderRadius: \"10px\", boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\", height: \"350px\" }}>\r\n//         <h3 style={{ color: \"#6b3fa0\", marginBottom: \"10px\" }}>Graphical Representation</h3>\r\n//         <ResponsiveContainer width=\"50%\" height=\"100%\">\r\n//           <BarChart data={chartData}>\r\n//             <CartesianGrid strokeDasharray=\"3 3\" />\r\n//             <XAxis dataKey=\"name\" />\r\n//             <YAxis allowDecimals={false} />\r\n//             <Tooltip />\r\n//             <Bar dataKey=\"value\" fill=\"#6b3fa0\" radius={[5, 5, 0, 0]} />\r\n//           </BarChart>\r\n//         </ResponsiveContainer>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const Card = ({ title, value, color, bg }) => (\r\n//   <div style={{ flex: \"1\", background: bg, borderRadius: \"10px\", padding: \"20px\", minWidth: \"220px\", boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\" }}>\r\n//     <h3 style={{ color }}>{title}</h3>\r\n//     <p style={{ fontSize: \"28px\", fontWeight: \"bold\" }}>{value}</p>\r\n//   </div>\r\n// );\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}